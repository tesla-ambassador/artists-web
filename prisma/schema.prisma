generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PRIMARY_ARTIST
  PERFORMER
  PRODUCER
  REMIXER
  COMPOSER
  LYRICIST
  PUBLISHER
  FEATURING_WITH
  CONDUCTOR
  ARRANGER
  ORCHESTRA
  ACTOR
  AGENT
  PROMOTER
  BENEFICIARY
}

model User {
  id                 String   @id @default(uuid())
  supabaseUserId     String   @unique
  name               String?
  locale             String?
  nickname           String?
  bio                String?
  email              String?  @unique
  preferred_username String?
  based_country      String?
  based_region       String?
  address            String?
  website            String?
  updated_at         DateTime?
  picture            String?
  followers          Int      @default(0)
  monthly_plays      Int      @default(0)
  downloads          Int      @default(0)
  is_artist          Boolean?
  country            String?
  email_alerts       String?
  instagram          String?
  twitter            String?
  youtube            String?
  facebook           String?
  role               Role[]
  influencers        String[]
  genre              String[]

  uploads            Upload[]
  uploadedSongs      Song[]   @relation("UserSongs") // ✅ Added for reverse relation
}

model Release {
  id                    String                @id @default(uuid())
  title                 String
  artworkUrl            String?
  songs                 Song[]
  artistRoles           ArtistRole[]
  legalOwners           LegalOwner[]
  distributionPlatforms DistributionPlatform[]
  createdAt             DateTime              @default(now())

  uploads               Upload[]
}

model Song {
  id            String   @id @default(uuid())
  title         String
  fileUrl       String
  releaseId     String?
  release       Release? @relation(fields: [releaseId], references: [id])
  uploadedById  String
  uploadedBy    User     @relation("UserSongs", fields: [uploadedById], references: [id]) // ✅ Relation name added
}

model ArtistRole {
  id        String   @id @default(uuid())
  name      String
  role      String
  ownership Int
  release   Release  @relation(fields: [releaseId], references: [id])
  releaseId String
}

model LegalOwner {
  id        String   @id @default(uuid())
  name      String
  year      Int
  type      String
  release   Release  @relation(fields: [releaseId], references: [id])
  releaseId String
}

model DistributionPlatform {
  id        String   @id @default(uuid())
  platform  String
  release   Release  @relation(fields: [releaseId], references: [id])
  releaseId String
}

model Upload {
  id        String   @id @default(uuid())
  filePath  String   @unique
  type      String   // 'audio', 'image', etc.
  title     String?  // optional title of the uploaded file
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  release   Release? @relation(fields: [releaseId], references: [id])
  releaseId String?  // nullable, linked later
  createdAt DateTime @default(now())
}
